"""
üìù **Instructions** :
- Installez toutes les biblioth√®ques n√©cessaires en fonction des imports pr√©sents dans le code, utilisez la commande suivante :conda create -n projet python pandas numpy ..........
- Compl√©tez les sections en √©crivant votre code o√π c‚Äôest indiqu√©.
- Ajoutez des commentaires clairs pour expliquer vos choix.
- Utilisez des emoji avec windows + ;
- Interpr√©tez les r√©sultats de vos visualisations (quelques phrases).
"""

### 1. Importation des librairies et chargement des donn√©es
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
import plotly.express as px

# Remplacez "chemin_du_fichier/ds_salaries.csv" par le chemin r√©el de votre fichier CSV
df = pd.read_csv("H:/projet_notebook/archive/ds_salaries.csv")


### 2. Exploration visuelle des donn√©es
#votre code 
st.title("üìä Visualisation des Salaires en Data Science")
st.markdown("Explorez les tendances des salaires √† travers diff√©rentes visualisations interactives.")


# Cr√©ation d'une case √† cocher pour afficher l'aper√ßu des donn√©es
if st.checkbox("Afficher un aper√ßu des donn√©es"):
    st.write(df.head())  # Afficher les premi√®res lignes du DataFrame


#Statistique g√©n√©rales avec describe pandas 
 
st.subheader("üìå Statistiques g√©n√©rales")
st.write(df.describe())
     



### 3. Distribution des salaires en France par r√¥le et niveau d'exp√©rience, uilisant px.box et st.plotly_chart
#votre code 
st.subheader("üìà Distribution des salaires en France")
df_france = df[df["employee_residence"] == "FR"]

# Cr√©er une liste d√©roulante pour s√©lectionner le niveau d'exp√©rience
experience_selected = st.selectbox(
    "S√©lectionnez un niveau d'exp√©rience :", 
    options=df["experience_level"].unique(),
    index=0  # S√©lectionne par d√©faut le premier √©l√©ment
)
# Filtrer les donn√©es en fonction du niveau d'exp√©rience s√©lectionn√©
df_filtered = df_france[df_france["experience_level"] == experience_selected]


fig = px.box(
        df_filtered,
        x="job_title",
        y="salary_in_usd",
        title="Distribution des salaires en France par r√¥le et niveau d'exp√©rience",
        labels={"job_title": "R√¥le", "salary_in_usd": "Salaire (‚Ç¨)"}
    )

    # Afficher le graphique avec Streamlit
st.plotly_chart(fig, use_container_width=True)

### 4. Analyse des tendances de salaires :
#### Salaire moyen par cat√©gorie : en choisisant une des : ['experience_level', 'employment_type', 'job_title', 'company_location'], utilisant px.bar et st.selectbox 
# Liste d√©roulante pour choisir la cat√©gorie d'analyse

categories = ['experience_level', 'employment_type', 'job_title', 'company_location']
selected_category = st.selectbox(
    "Choisissez une cat√©gorie pour voir le salaire moyen :", 
    categories
)

# Calcul du salaire moyen par cat√©gorie s√©lectionn√©e
salary_avg = df.groupby(selected_category)["salary"].mean().reset_index()

# Cr√©ation du graphique en barres
fig = px.bar(
    salary_avg,
    x=selected_category,
    y="salary",
    color=selected_category,  # Ajoute une couleur diff√©rente par cat√©gorie
    title=f"Salaire moyen par {selected_category}",
    labels={selected_category: selected_category.capitalize(), "salary": "Salaire moyen (‚Ç¨)"},
)

# Affichage du graphique
st.plotly_chart(fig, use_container_width=True)




### 5. Corr√©lation entre variables
# S√©lectionner uniquement les colonnes num√©riques pour la corr√©lation
#votre code 

st.subheader("üîó Corr√©lations entre variables num√©riques")

df_numeric = df.select_dtypes(include=["number"])

# Calcul de la matrice de corr√©lation
corr_matrix = df_numeric.corr()

# Cr√©ation d'une figure matplotlib pour afficher la heatmap
fig, ax = plt.subplots(figsize=(8, 6))
sns.heatmap(corr_matrix, annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5, ax=ax)

# Affichage du graphique dans Streamlit
st.pyplot(fig)


st.subheader("üîó Corr√©lations entre variables num√©riques")




### 6. Analyse interactive des variations de salaire
# Une √©volution des salaires pour les 10 postes les plus courants
# count of job titles pour selectionner les postes
# calcule du salaire moyen par an
#utilisez px.line
#votre code 


# S√©lectionner les 10 postes les plus courants
top_jobs = df["job_title"].value_counts().nlargest(10).index.tolist()

# Liste d√©roulante pour s√©lectionner un poste parmi les 10 plus courants
selected_job = st.selectbox("S√©lectionnez un poste :", top_jobs)

# Filtrer les donn√©es pour le poste s√©lectionn√©
df_filtered = df[df["job_title"] == selected_job]

# Calcul du salaire moyen par ann√©e
salary_trend = df_filtered.groupby("work_year")["salary_in_usd"].mean().reset_index()

# Cr√©ation du graphique d'√©volution des salaires
fig = px.line(
    salary_trend,
    x="work_year",
    y="salary_in_usd",
    markers=True,  # Ajouter des points sur la courbe
    title=f"√âvolution du salaire moyen pour {selected_job}",
    labels={"work_year": "Ann√©e", "salary_in_usd": "Salaire moyen (‚Ç¨)"},
    line_shape="linear"
)

# Affichage du graphique avec Streamlit
st.plotly_chart(fig, use_container_width=True)




### 7. Salaire m√©dian par exp√©rience et taille d'entreprise
# utilisez median(), px.bar
#votre code 




### 8. Ajout de filtres dynamiques
#Filtrer les donn√©es par salaire utilisant st.slider pour selectionner les plages 
#votre code 




### 9.  Impact du t√©l√©travail sur le salaire selon le pays




### 10. Filtrage avanc√© des donn√©es avec deux st.multiselect, un qui indique "S√©lectionnez le niveau d'exp√©rience" et l'autre "S√©lectionnez la taille d'entreprise"
#votre code 

